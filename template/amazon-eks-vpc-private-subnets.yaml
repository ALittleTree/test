---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'dev VPC have 4 subnet, other have 6 subnet'
#########################Parameters#########################
Parameters:

  Environment:
    Description: dev\pre\qua\prod
    Type: String
    Default: dev
    AllowedValues: ['dev','pre','prd','qua']

#####VPC Parameters########
  VpcName:
    Type: String
    Default: vpcName
    Description: The VPC Name

  VpcBlock:
    Type: String
    Default: 172.30.97.0/24
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  TransitGatewayId:
    Type: String
    Description: The ID of a transit gateway.

  CFVPCEndpointSecurityGroupId:
    Type: String
    Description: The ID of security group for cloudformation vpc endpoint.
  
  ECRVPCEndpointSecurityGroupId:
    Type: String
    Description: The ID of security group for ECR vpc endpoint.  
  
  EC2VPCEndpointSecurityGroupId:
    Type: String
    Description: The ID of security group for EC2 vpc endpoint. 

  ECRAPIVPCEndpointSecurityGroupId:
    Type: String
    Description: The ID of security group for ECR api vpc endpoint.  


#######SubNet Parameters##########

  Subnet01Block:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for  subnet 01 within the VPC
  
  Subnet01Name:
    Type: String
    Default: Subnet01
    Description: Subnet01 Name

  Subnet02Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for subnet 02 within the VPC

  Subnet02Name:
    Type: String
    Default: Subnet02
    Description: Subnet02 Name

  Subnet03Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for subnet 03 within the VPC

    
  Subnet03Name:
    Type: String
    Default: Subnet03Name
    Description: Subnet03 Name

  Subnet04Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for subnet 03 within the VPC
  
  Subnet04Name:
    Type: String
    Default: Subnet04
    Description: Subnet04 Name

  Subnet05Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for subnet 05 within the VPC
  
  Subnet05Name:
    Type: String
    Default: Subnet05
    Description: Subnet05 Name

  Subnet06Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for subnet 06 within the VPC
  
  Subnet06Name:
    Type: String
    Default: Subnet06
    Description: Subnet06 Name

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - Subnet01Block
          - Subnet02Block
          - Subnet03Block
          - Subnet04Block
          - Subnet05Block
          - Subnet06Block

######################Conditions#######################

Conditions:
  Is-DEVOrPre: !Or [!Equals [!Ref Environment, dev],!Equals [!Ref Environment, pre]]
  Is-NotDEVOrPre: !Not [{Condition: Is-DEVOrPre}]
  Is-NotDev: !Not [!Equals [!Ref Environment, dev]]
  

######################Resources#######################
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref VpcName

#####################RouteTable#########################

  VPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Ref VpcName

  VPCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGatewayId

######################Subnet##########################

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref Subnet01Name
      - Key: kubernetes.io/role/elb
        Value: 1

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref Subnet02Name
      - Key: kubernetes.io/role/elb
        Value: 1

  Subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet03Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref Subnet03Name
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  Subnet04:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 04
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet04Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref Subnet04Name
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  Subnet05:
    Type: AWS::EC2::Subnet
    Condition: Is-NotDEVOrPre
    Metadata:
      Comment: Subnet 05
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet05Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref Subnet05Name
      - Key: kubernetes.io/role/internal-elb
        Value: 1
    
  Subnet06:
    Type: AWS::EC2::Subnet
    Condition: Is-NotDEVOrPre
    Metadata:
      Comment: Subnet 06
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet06Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref Subnet06Name
      - Key: kubernetes.io/role/internal-elb
        Value: 1


  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref VPCRouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref VPCRouteTable

  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref VPCRouteTable

  Subnet04RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet04
      RouteTableId: !Ref VPCRouteTable

  Subnet05RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Is-NotDEVOrPre
    Properties:
      SubnetId: !Ref Subnet05
      RouteTableId: !Ref VPCRouteTable

  Subnet06RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Is-NotDEVOrPre
    Properties:
      SubnetId: !Ref Subnet06
      RouteTableId: !Ref VPCRouteTable

###############SecurityGroup#####################

  TempAllTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: temp all traffic
      VpcId: !Ref VPC
      GroupName: !Sub AllTraffic - ${Environment}


  CFNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub CFN - ${Environment}
      VpcId: !Ref VPC
      GroupName: !Sub CFN - ${Environment}
  
  CFNSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: !Sub CFN - ${Environment}
    VpcId: !Ref VPC
    GroupName: !Sub CFN - ${Environment}

  VPCNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId:
          Ref: VPC
  
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: VPCNetworkAcl
       RuleNumber: 100
       Protocol: -1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0


  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: VPCNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       
########################VPCEndpoint#####################
  S3VPCEndpoint:
    Condition: Is-NotDev
    DependsOn: 
      - VPC
      - Subnet01
      - Subnet02
      - Subnet03
      - Subnet04
      - Subnet05
      - Subnet06
      - VPCRouteTable
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: True
      RouteTableIds: 
        - !Ref VPCRouteTable
      ServiceName:  !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  CFVPCEndpoint:
    Condition: Is-NotDev
    DependsOn: 
      - VPC
      - Subnet01
      - Subnet02
      - Subnet03
      - VPCRouteTable
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: True
      ServiceName:  !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      SubnetIds: 
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
      SecurityGroupIds: !Ref CFVPCEndpointSecurityGroupId
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  ECRVPCEndpoint:
    Condition: Is-NotDev
    DependsOn: 
      - VPC
      - Subnet01
      - Subnet02
      - Subnet03
      - VPCRouteTable
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: True
      ServiceName:  !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      SubnetIds: 
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
      SecurityGroupIds: !Ref ECRVPCEndpointSecurityGroupId
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  EC2VPCEndpoint:
    Condition: Is-NotDev
    DependsOn: 
      - VPC
      - Subnet01
      - Subnet02
      - Subnet03
      - VPCRouteTable
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: True
      ServiceName:  !Sub 'com.amazonaws.${AWS::Region}.ec2'
      SubnetIds: 
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
      SecurityGroupIds: !Ref EC2VPCEndpointSecurityGroupId
      VpcEndpointType: Interface
      VpcId: !Ref VPC 
  
  ECRAPIVPCEndpoint:
    Condition: Is-NotDev
    DependsOn: 
      - VPC
      - Subnet01
      - Subnet02
      - Subnet03
      - VPCRouteTable
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: True
      ServiceName:  !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      SubnetIds: 
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
      SecurityGroupIds: !Ref ECRAPIVPCEndpointSecurityGroupId
      VpcEndpointType: Interface
      VpcId: !Ref VPC 
  
Outputs:

  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref Subnet01, !Ref Subnet02, !Ref Subnet03, !Ref Subnet04 ] ]

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
